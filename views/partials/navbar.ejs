<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flowbite Navigation with Notification Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .grey-icon {
            fill: gray;
            /* Initial color */
        }

        .grey-icon:hover {
            fill: black;
            /* Color on click */
        }

        .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
    </style>
</head>

<body class="font-sans antialiased">
    <nav class="bg-white border-gray-200 dark:bg-gray-900 shadow-md sticky h-14 top-0">
        <div class="flex flex-wrap items-center justify-between mx-auto p-2">
            <a href="https://flowbite.com/" class="flex items-center space-x-3 rtl:space-x-reverse">
                <img src="/images/Echo (1).png" class="h-8" alt="Flowbite Logo" />
                <span class="self-center text-2xl font-semibold whitespace-nowrap  font-semibold ml-4 text-blue-500">Echo<span class="text-2xl text-blue-700">Pages</span></span>
            </a>
            <div class="flex items-center md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
                <% if (isloggedIn) { %>
                    <!-- Avatar button -->
                    <button type="button"
                        class="flex text-sm bg-gray-800 rounded-full md:me-0 focus:ring-4 focus:ring-gray-300 dark:focus:ring-gray-600"
                        id="user-menu-button" aria-expanded="false" data-dropdown-toggle="user-dropdown"
                        data-dropdown-placement="bottom">
                        <span class="sr-only">Open user menu</span>
                        <img class="w-8 h-8 rounded-full" src="" alt="user photo">
                    </button>
                    <!-- Dropdown menu -->
                    <div class="z-50 hidden my-4 text-base list-none bg-white divide-y divide-gray-100 rounded-lg shadow dark:bg-gray-700 dark:divide-gray-600"
                        id="user-dropdown">
                        <!-- Profile dropdown content -->
                        <div class="px-4 py-3">
                            <span class="block text-sm text-gray-900 dark:text-white"><%= userName %></span>
                            <span class="block text-sm  text-gray-500 truncate dark:text-gray-400"><%= userEmail %></span>
                        </div>
                        <ul class="py-2" aria-labelledby="user-menu-button">
                            <li>
                                <a href="/user/<%= userId %>/profile"
                                    class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Profile</a>
                            </li>
                            <li>
                                <a href="#"
                                    class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Liked</a>
                            </li>
                            <li>
                                <a href="/posts/saved"
                                    class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Saved</a>
                            </li>
                            <li>
                                <form action="/user/signout" method="post">
                                    <button type="submit"
                                        class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white">Sign
                                        out</button>
                                </form>
                            </li>
                        </ul>
                    </div>
                <% } else { %>
                    <!-- Sign in link -->
                    <a href="/user/login" class="text-gray-700 hover:text-gray-900">Sign In</a>
                <% } %>
                <button data-collapse-toggle="navbar-user" type="button"
                    class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
                    aria-controls="navbar-user" aria-expanded="false">
                    <span class="sr-only">Open main menu</span>
                    <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 17 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M1 1h15M1 7h15M1 13h15" />
                    </svg>
                </button>
            </div>
            <div class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1" id="navbar-user">
                <ul
                    class="flex flex-col font-medium p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
                    <li>
                        <a href="/posts"
                            class="block py-2 px-3 text-white bg-blue-700 rounded md:bg-transparent md:text-gray-900 hover:text-blue-700 md:p-0 md:dark:text-blue-500"
                            aria-current="page">All Pages</a>
                    </li>
                    <li>
                        <a href="/posts/new"
                            class="block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500">Create</a>
                    </li>
                    <li>
                        <div>
                            <div x-data="{ dropdownOpen: false }" class="relative">
                                <button @click="dropdownOpen = !dropdownOpen"
                                    class=" z-10 block rounded-md bg-white p focus:outline-none flex flex-col justify-start items-center"
                                    id="notificationIcon">
                                    <span
                                        class="mt-0 font-medium text-gray-800 rounded hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">Notifications</span>
                                    <!-- Your SVG icon -->
                                </button>
                                <div x-show="dropdownOpen" @click="dropdownOpen = false"
                                    class="fixed inset-0 h-full w-full z-10"></div>
                                <div x-show="dropdownOpen"
                                    class="absolute right-0 mt-2 bg-white rounded-md shadow-lg overflow-hidden z-20"
                                    style="width:20rem;">
                                    <div class="py-2" id="notificationList">
                                    </div>
                                    <div class="py-2" id="dropdown">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    
    

    <script>
        function timeAgo(timestamp) {
            const seconds = Math.floor((Date.now() - new Date(timestamp).getTime()) / 1000);

            let interval = Math.floor(seconds / 31536000);
            if (interval > 1) {
                return `${interval} years ago`;
            }
            interval = Math.floor(seconds / 2592000);
            if (interval > 1) {
                return `${interval} months ago`;
            }
            interval = Math.floor(seconds / 86400);
            if (interval > 1) {
                return `${interval} days ago`;
            }
            interval = Math.floor(seconds / 3600);
            if (interval > 1) {
                return `${interval} hours ago`;
            }
            interval = Math.floor(seconds / 60);
            if (interval > 1) {
                return `${interval} minutes ago`;
            }
            return `${Math.floor(seconds)} seconds ago`;
        }
        const userId = '<%=userId%>';
        const notificationButton = document.querySelector('#notificationIcon');

        notificationButton.addEventListener('click', () => {
            fetch(`/user/${userId}/notifications`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            }).then(data => {
                console.log('Fetch successful:', data);
                // console.log(data.length)
                const notificationList = document.querySelector('#notificationList');
                notificationList.innerHTML = '';
                // Iterate over fetched notifications and append them to the notification list
                const getMessage = function (notificationType) {
                    switch (notificationType) {
                        case 'like':
                            return `liked your post`;
                        case 'comment':
                            return `commented on your post`;
                        case 'follow':
                            return `started following you`;
                        default:
                            return `performed an action`;
                    }
                };

                // Keep track of the number of notifications appended
                let count = 0;

                data.forEach(notification => {
                    if (count < 5) {
                        const anchorTag = document.createElement('a');
                        // flex items-center px-4 py-3 hover:bg-gray-100 -mx-2
                        anchorTag.classList.add('flex', 'py-3', 'px-4', 'items-center', 'hover:bg-gray-100', '-mx-2');

                        // Build the HTML structure for each notification
                        anchorTag.innerHTML = `<img class="h-8 w-8 rounded-full object-cover mx-1"
                                                src="https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=398&q=80"
                                                alt="avatar">
                                                <div class="text-gray-500 font-normal text-sm mb-1.5 dark:text-gray-400"><span
                        class="font-semibold text-gray-900 dark:text-white"><a href='/user/${notification.actionBy._id}/profile'>${notification.actionBy.name}</span>
                         ${getMessage(notification.notificationType)} ${notification.notificationType != 'follow' ? `<a href='/posts/${notification.postId._id}' class='font-bold'>${notification.postId.title}</a>` : ''}
                        </div>`    ;

                        anchorTag.setAttribute('class', "flex py-3 px-4 hover:bg-gray-100 dark:hover:bg-gray-600");
                        notificationList.appendChild(anchorTag);


                        count++; // Increment the count of notifications appended
                    }
                });
                const dropdown = document.querySelector('#dropdown');
                dropdown.innerHTML = ''
                if (data.length == 0) {
                    const info = document.createElement('p');
                    info.innerHTML = 'No New Notifications';
                    info.classList.add('block', 'bg-gray-100', 'text-center', 'font-bold', 'py-2');
                    dropdown.appendChild(info)
                } else {
                    const anc = document.createElement('a');
                    anc.classList.add('block', 'bg-gray-100', 'text-center', 'font-bold', 'py-2');

                    anc.innerHTML = `See all notifications`;
                    anc.setAttribute('href', '/user/notifications')
                    dropdown.appendChild(anc);
                }
            }).catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
        });

    </script>

    <script src="https://unpkg.com/@themesberg/flowbite@1.1.1/dist/flowbite.bundle.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@2.x/dist/alpine.min.js" defer></script>
</body>

</html>